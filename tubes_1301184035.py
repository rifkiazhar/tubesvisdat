# -*- coding: utf-8 -*-
"""Tubes_1301184035.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MqU0S2y7VUMeqfFlIvHfKiUMHiIHqcaR
"""

#Data handing
import pandas as pd
import numpy as np

#Bokeh libraries
#from bokeh.io import curdoc
from bokeh.io import curdoc
from bokeh.plotting import figure, show
from bokeh.models import HoverTool, ColumnDataSource, Select
from bokeh.models import CategoricalColorMapper
from bokeh.palettes import Spectral6
from bokeh.layouts import WidgetBox, row, column
from bokeh.models import Slider, Select
from bokeh.models.widgets import Tabs, Panel, CheckboxGroup

df2 = pd.read_csv('covid_19_indonesia_time_series_all.csv') #https://www.kaggle.com/hendratno/covid19-indonesia

df2.head()



df2.shape

datasett = df2 [['Date', 'Location', 'New Cases', 'Total Cases', 'Total Deaths', 'Total Recovered']]

datasett["Date"] = pd.to_datetime(datasett['Date'])

datasett.head()

#membuat location agar tidak sama
region = list(datasett.Location.unique())

#List dari setiap kolom
col_list = list(datasett.columns)

def create_data(region,cases):
  x_list = []
  y_list = []
  colors = []
  labels = []

  for i, region in enumerate(region):
    df = datasett[datasett['Location'] == region].reset_index(drop= True)

    x = list(df['Date'])
    y = list(df[cases])

    x_list.append(list(x))
    y_list.append(list(y))

    colors.append(Spectral6)
    labels.append(region)

    new_src = ColumnDataSource(datasett= {'x':x_list, 'y':y_list, 'color':colors, 'label':labels})

    return new_src

def plot(src, cases):

  fig = figure(x_axis_type='datetime',
               plot_width=900, plot_height=450,
               title = 'Visualization Covid19 in Indonesian',
               x_axis_label= 'Date', y_axis_label= 'Cases')
  
  tooltips_region = [
                     ('Date', '@date{%F}'),
                     ('New Cases', '@new cases'),
                     ('Total Cases', '@total cases'),
                     ('Total Deaths', '@total_deaths'),
                     ('Total Recovered', '@total_recovered')
                    ]

  fig.add_tools(HoverTool(tooltips=tooltips_region, formatters= {'@date' : 'datetime'}))

  return fig

def update_region(attr, old, new):
  region_plot = [region_selection.labels[i] for i in region_selection.active]

  new_src = create_data(region_plot,cases.value)
  src.datasett.update(new_src.datasett)

def update_fitur(attr, old, new):
   region_plot = [region_selection.labels[i] for i in region_selection.active]
  
   cases = cases.value

   new_src = create_data(region_plot, cases)

   src.datasett.update(new_src.datasett)

region_selection = CheckboxGroup(labels=region, active=[0])
region_selection.on_change('active', update_region)

cases = Select(options = col_list[2:], value='Total Cases', title='Cases')
cases.on_change('value',update_fitur)

#region_now = [region_selection.labels[i] for i in region_selection.active]
#src = create_data (region_now, cases.value)

#p = plot(src, cases.value)

controls = WidgetBox(cases,region_selection)

layout=row(controls)
curdoc().add_root(layout)